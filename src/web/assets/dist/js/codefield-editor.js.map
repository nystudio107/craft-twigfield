{"version":3,"file":"js/codefield-editor.js","mappings":"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","sources":["webpack://Buildchain/../src/web/assets/src/js/autocomplete.ts","webpack://Buildchain/../src/web/assets/src/js/language-icons.ts","webpack://Buildchain/../src/web/assets/src/js/default-monaco-editor-options.ts","webpack://Buildchain/../src/web/assets/src/js/codefield.ts"],"sourcesContent":["/**\n * Twigfield Craft CMS\n *\n * Provides a twig editor field with Twig & Craft API autocomplete\n *\n * @link      https://nystudio107.com\n * @copyright Copyright (c) 2022 nystudio107\n */\n\n/**\n * @author    nystudio107\n * @package   Twigfield\n * @since     1.0.0\n */\n\ndeclare global {\n  interface Window {\n    monaco: string;\n    monacoAutocompleteItems: {[key: string]: string},\n    twigfieldFieldTypes: {[key: string]: string},\n  }\n}\n\nimport * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\n\nconst COMPLETION_KEY = '__completions';\n\n/**\n * Get the last item from the array\n *\n * @param {Array<T>} arr\n * @returns {T}\n */\nfunction getLastItem<T>(arr: Array<T>): T {\n  return arr[arr.length - 1];\n}\n\n/**\n * Register completion items with the Monaco editor, for the Twig language\n *\n * @param completionItems array of completion items, with sub-properties in `COMPLETION_KEY`\n * @param autocompleteType the type of autocomplete, either `TwigExpressionAutocomplete` or `GeneralAutocomplete`\n * @param hasSubProperties where the autocomplete has sub-properties, and should be parsed as such\n */\nfunction addCompletionItemsToMonaco(completionItems: AutocompleteItem, autocompleteType: AutocompleteTypes, hasSubProperties: boolean) {\n  monaco.languages.registerCompletionItemProvider('twig', {\n    triggerCharacters: ['.', '('],\n    provideCompletionItems: function (model, position, token) {\n      let result: monaco.languages.CompletionItem[] = [];\n      let currentItems = completionItems;\n      // Get the last word the user has typed\n      const currentLine = model.getValueInRange({\n        startLineNumber: position.lineNumber,\n        startColumn: 0,\n        endLineNumber: position.lineNumber,\n        endColumn: position.column\n      });\n      let inTwigExpression = true;\n      // Ensure we're inside of a Twig expression\n      if (currentLine.lastIndexOf('{') === -1) {\n        inTwigExpression = false;\n      }\n      const startExpression = currentLine.substring(currentLine.lastIndexOf('{'));\n      if (startExpression.indexOf('}') !== -1) {\n        inTwigExpression = false;\n      }\n      // We are not in a Twig expression, and this is a TwigExpressionAutocomplete, return nothing\n      if (!inTwigExpression && autocompleteType === 'TwigExpressionAutocomplete') {\n        return null;\n      }\n      // Get the current word we're typing\n      const currentWords = currentLine.replace(\"\\t\", \"\").split(\" \");\n      let currentWord = currentWords[currentWords.length - 1];\n      // If the current word includes { or ( or >, split on that, too, to allow the autocomplete to work in nested functions and HTML tags\n      if (currentWord.includes('{')) {\n        currentWord = getLastItem(currentWord.split('{'));\n      }\n      if (currentWord.includes('(')) {\n        currentWord = getLastItem(currentWord.split('('));\n      }\n      if (currentWord.includes('>')) {\n        currentWord = getLastItem(currentWord.split('>'));\n      }\n      const isSubProperty = currentWord.charAt(currentWord.length - 1) === \".\";\n      // If we're in a sub-property (following a .) don't present non-TwigExpressionAutocomplete items\n      if (isSubProperty && autocompleteType !== 'TwigExpressionAutocomplete') {\n        return null;\n      }\n      // We are in a Twig expression, handle TwigExpressionAutocomplete by walking through the properties\n      if (inTwigExpression && autocompleteType === 'TwigExpressionAutocomplete') {\n        // If the last character typed is a period, then we need to look up a sub-property of the completionItems\n        if (isSubProperty) {\n          // If we're in a sub-property, and this autocomplete doesn't have sub-properties, don't return its items\n          if (!hasSubProperties) {\n            return null;\n          }\n          // Is a sub-property, get a list of parent properties\n          const parents = currentWord.substring(0, currentWord.length - 1).split(\".\");\n          if (typeof completionItems[parents[0]] !== 'undefined') {\n            currentItems = completionItems[parents[0]];\n            // Loop through all the parents to traverse the completion items and find the current one\n            for (let i = 1; i < parents.length; i++) {\n              if (currentItems.hasOwnProperty(parents[i])) {\n                currentItems = currentItems[parents[i]];\n              } else {\n                const finalItems: monaco.languages.ProviderResult<monaco.languages.CompletionList> = {\n                  suggestions: result\n                }\n                return finalItems;\n              }\n            }\n          }\n        }\n      }\n      // Get all the child properties\n      if (typeof currentItems !== 'undefined') {\n        for (let item in currentItems) {\n          if (currentItems.hasOwnProperty(item) && !item.startsWith(\"__\")) {\n            const completionItem = currentItems[item][COMPLETION_KEY];\n            if (typeof completionItem !== 'undefined') {\n              // Monaco adds a 'range' to the object, to denote where the autocomplete is triggered from,\n              // which needs to be removed each time the autocomplete objects are re-used\n              delete completionItem.range;\n              if ('documentation' in completionItem && typeof completionItem.documentation !== 'object') {\n                let docs = completionItem.documentation;\n                completionItem.documentation = {\n                  value: docs,\n                  isTrusted: true,\n                  supportsHtml: true\n                }\n              }\n              // Add to final results\n              result.push(completionItem);\n            }\n          }\n        }\n      }\n\n      const finalItems: monaco.languages.ProviderResult<monaco.languages.CompletionList> = {\n        suggestions: result\n      }\n      return finalItems;\n    }\n  });\n}\n\n/**\n * Register hover items with the Monaco editor, for the Twig language\n *\n * @param completionItems array of completion items, with sub-properties in `COMPLETION_KEY`\n * @param autocompleteType the type of autocomplete, either `TwigExpressionAutocomplete` or `GeneralAutocomplete`\n */\nfunction addHoverHandlerToMonaco(completionItems: AutocompleteItem, autocompleteType: AutocompleteTypes) {\n  monaco.languages.registerHoverProvider('twig', {\n    provideHover: function (model, position) {\n      let result: monaco.languages.Hover;\n      const currentLine = model.getValueInRange({\n        startLineNumber: position.lineNumber,\n        startColumn: 0,\n        endLineNumber: position.lineNumber,\n        endColumn: model.getLineMaxColumn(position.lineNumber)\n      });\n      const currentWord = model.getWordAtPosition(position);\n      if (currentWord === null) {\n        return;\n      }\n      let searchLine = currentLine.substring(0, currentWord.endColumn - 1)\n      let isSubProperty = false;\n      let currentItems = completionItems;\n      for (let i = searchLine.length; i >= 0; i--) {\n        if (searchLine[i] === ' ') {\n          searchLine = currentLine.substring(i + 1, searchLine.length);\n          break;\n        }\n      }\n      if (searchLine.includes('.')) {\n        isSubProperty = true;\n      }\n      if (isSubProperty) {\n        // Is a sub-property, get a list of parent properties\n        const parents = searchLine.substring(0, searchLine.length).split(\".\");\n        // Loop through all the parents to traverse the completion items and find the current one\n        for (let i = 0; i < parents.length - 1; i++) {\n          const thisParent = parents[i].replace(/[{(<]/, '');\n          if (currentItems.hasOwnProperty(thisParent)) {\n            currentItems = currentItems[thisParent];\n          } else {\n            return;\n          }\n        }\n      }\n      if (typeof currentItems !== 'undefined' && typeof currentItems[currentWord.word] !== 'undefined') {\n        const completionItem = currentItems[currentWord.word][COMPLETION_KEY];\n        if (typeof completionItem !== 'undefined') {\n          let docs = completionItem.documentation;\n          if (typeof completionItem.documentation === 'object') {\n            docs = completionItem.documentation.value;\n          }\n\n          const finalHover: monaco.languages.ProviderResult<monaco.languages.Hover> = {\n            range: new monaco.Range(position.lineNumber, currentWord.startColumn, position.lineNumber, currentWord.endColumn),\n            contents: [\n              {value: '**' + completionItem.detail + '**'},\n              {value: docs},\n            ]\n          }\n          return  finalHover\n        }\n      }\n\n      return;\n    }\n  });\n}\n\n/**\n * Fetch the autocompletion items from local storage, or from the endpoint if they aren't cached in local storage\n */\nfunction getCompletionItemsFromEndpoint(fieldType: string = 'Twigfield', twigfieldOptions: string = '', endpointUrl: string) {\n  const searchParams = new URLSearchParams();\n  if (typeof fieldType !== 'undefined') {\n    searchParams.set('fieldType', fieldType);\n  }\n  if (typeof twigfieldOptions !== 'undefined') {\n    searchParams.set('twigfieldOptions', twigfieldOptions);\n  }\n  const glueChar = endpointUrl.includes('?') ? '&' : '?';\n  // Only issue the XHR if we haven't loaded the autocompletes for this fieldType already\n  if (typeof window.twigfieldFieldTypes === 'undefined') {\n    window.twigfieldFieldTypes = {};\n  }\n  if (fieldType in window.twigfieldFieldTypes) {\n    return;\n  }\n  window.twigfieldFieldTypes[fieldType] = fieldType;\n  // Ping the controller endpoint\n  let request = new XMLHttpRequest();\n  request.open('GET', endpointUrl + glueChar + searchParams.toString(), true);\n  request.onload = function () {\n    if (request.status >= 200 && request.status < 400) {\n      const completionItems: AutocompleteResponse = JSON.parse(request.responseText);\n      if (typeof window.monacoAutocompleteItems === 'undefined') {\n        window.monacoAutocompleteItems = {};\n      }\n      // Don't add a completion more than once, as might happen with multiple Twigfield instances\n      // on the same page, because the completions are global in Monaco\n      for (const [name, autocomplete] of Object.entries(completionItems)) {\n        if (!(autocomplete.name in window.monacoAutocompleteItems)) {\n          window.monacoAutocompleteItems[autocomplete.name] = autocomplete.name;\n          addCompletionItemsToMonaco(autocomplete.__completions, autocomplete.type, autocomplete.hasSubProperties);\n          addHoverHandlerToMonaco(autocomplete.__completions, autocomplete.type);\n        }\n      }\n    } else {\n      console.log('Autocomplete endpoint failed with status ' + request.status)\n    }\n  };\n  request.send();\n}\n\nexport {getCompletionItemsFromEndpoint};\n","interface StringMap {\n  [key: string]: string;\n}\n\nexport const languageIcons: StringMap = {\n  'twig': `<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 320 320\" style=\"enable-background:new 0 0 320 320;\" xml:space=\"preserve\">\n<style type=\"text/css\">.st0{fill:currentcolor;}</style>\n<g>\n\\t<path class=\"st0\" d=\"M128,35.6c-17.7,0-32,15.9-32,35.6v35.6c0,29.5-21.5,53.3-48,53.3c26.5,0,48,23.9,48,53.3v35.6\n\\t\\tc0,19.6,14.3,35.6,32,35.6V320H96c-35.3,0-64-31.9-64-71.1v-35.6c0-19.6-14.3-35.6-32-35.6v-35.6c17.7,0,32-15.9,32-35.6V71.1\n\\t\\tC32,31.9,60.7,0,96,0h32V35.6L128,35.6z\"/>\n\\t<path class=\"st0\" d=\"M320,177.8c-17.7,0-32,15.9-32,35.6v35.6c0,39.2-28.7,71.1-64,71.1h-32v-35.6c17.7,0,32-15.9,32-35.6v-35.6\n\\t\\tc0-29.5,21.5-53.3,48-53.3c-26.5,0-48-23.9-48-53.3V71.1c0-19.6-14.3-35.6-32-35.6V0h32c35.3,0,64,31.9,64,71.1v35.6\n\\t\\tc0,19.6,14.3,35.6,32,35.6V177.8L320,177.8z\"/>\n</g>\n</svg>`,\n};\n","// The default EditorOptions for the Monaco editor instance\n// ref: https://microsoft.github.io/monaco-editor/api/enums/monaco.editor.EditorOption.html\nimport * as monaco from \"monaco-editor\";\n\nexport const defaultMonacoEditorOptions: monaco.editor.IStandaloneEditorConstructionOptions = {\n  language: 'twig',\n  theme: 'vs',\n  automaticLayout: true,\n  tabIndex: 0,\n  // Disable sidebar line numbers\n  lineNumbers: 'off',\n  glyphMargin: false,\n  folding: false,\n  // Undocumented see https://github.com/Microsoft/vscode/issues/30795#issuecomment-410998882\n  lineDecorationsWidth: 0,\n  lineNumbersMinChars: 0,\n  // Disable the current line highlight\n  renderLineHighlight: 'none',\n  wordWrap: 'on',\n  scrollBeyondLastLine: false,\n  scrollbar: {\n    vertical: 'hidden',\n    horizontal: 'auto',\n    alwaysConsumeMouseWheel: false,\n    handleMouseWheel: false,\n  },\n  fontSize: 14,\n  fontFamily: 'SFMono-Regular, Consolas, \"Liberation Mono\", Menlo, Courier, monospace',\n  minimap: {\n    enabled: false\n  },\n};\n","/**\n * Twigfield Craft CMS\n *\n * Provides a twig editor field with Twig & Craft API autocomplete\n *\n * @link      https://nystudio107.com\n * @copyright Copyright (c) 2022 nystudio107\n */\n\n/**\n * @author    nystudio107\n * @package   Twigfield\n * @since     1.0.0\n */\n\ndeclare global {\n  let __webpack_public_path__: string;\n  const Craft: Craft;\n\n  interface Window {\n    twigfieldBaseAssetsUrl: string;\n    makeMonacoEditor: MakeMonacoEditorFunction;\n  }\n}\n\n// Set the __webpack_public_path__ dynamically so we can work inside of cpresources's hashed dir name\n// https://stackoverflow.com/questions/39879680/example-of-setting-webpack-public-path-at-runtime\nif (typeof __webpack_public_path__ === 'undefined' || __webpack_public_path__ === '') {\n  __webpack_public_path__ = window.twigfieldBaseAssetsUrl;\n}\n\nimport * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport {getCompletionItemsFromEndpoint} from './autocomplete';\nimport {languageIcons} from './language-icons'\nimport {defaultMonacoEditorOptions} from './default-monaco-editor-options'\n\n/**\n * Create a Monaco Editor instance\n *\n * @param {string} elementId - The id of the TextArea or Input element to replace with a Monaco editor\n * @param {string} fieldType - The field's passed in type, used for autocomplete caching\n * @param {string} wrapperClass - Classes that should be added to the field's wrapper <div>\n * @param {IStandaloneEditorConstructionOptions} editorOptions - Monaco editor options ref: https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.IStandaloneEditorConstructionOptions.html\n * @param {string} codefieldOptions - JSON encoded string of arbitrary CodefieldOptions for the field\n * @param {string} endpointUrl - The controller action endpoint for generating autocomplete items\n * @param {string} placeholderText - Placeholder text to use for the field\n */\nfunction makeMonacoEditor(elementId: string, fieldType: string, wrapperClass: string, editorOptions: string, codefieldOptions: string, endpointUrl: string, placeholderText: string = '') {\n  const textArea = <HTMLInputElement>document.getElementById(elementId);\n  const container = document.createElement('div');\n  const fieldOptions: CodefieldOptions = JSON.parse(codefieldOptions);\n  const placeholderId = elementId + '-monaco-editor-placeholder';\n  // If we can't find the passed in text area or if there is no parent node, return\n  if (textArea === null || textArea.parentNode === null) {\n    return;\n  }\n  // Monaco editor defaults, coalesced together\n  const monacoEditorOptions: monaco.editor.IStandaloneEditorConstructionOptions = JSON.parse(editorOptions);\n  let options: monaco.editor.IStandaloneEditorConstructionOptions = {...defaultMonacoEditorOptions, ...monacoEditorOptions, ...{value: textArea.value}}\n  // Make a sibling div for the Monaco editor to live in\n  container.id = elementId + '-monaco-editor';\n  container.classList.add('relative', 'box-content', 'monaco-editor-twigfield', 'h-full');\n  // Add the icon in, if there is one\n  const iconHtml = typeof options.language === \"undefined\" ? null : languageIcons[options.language];\n  if (iconHtml) {\n    const icon = document.createElement('div');\n    icon.classList.add('monaco-editor-twigfield--icon');\n    icon.setAttribute('title', Craft.t('twigfield', 'Twig code is supported.'));\n    icon.setAttribute('aria-hidden', 'true');\n    icon.innerHTML = iconHtml;\n    container.appendChild(icon);\n  }\n  // Apply any passed in classes to the wrapper div\n  if (wrapperClass !== '') {\n    const cl = container.classList;\n    const classArray = wrapperClass.trim().split(/\\s+/);\n    cl.add(...classArray);\n  }\n  // Handle the placeholder text (if any)\n  if (placeholderText !== '') {\n    let placeholder = document.createElement('div');\n    placeholder.id = elementId + '-monaco-editor-placeholder';\n    placeholder.innerHTML = placeholderText;\n    placeholder.classList.add('monaco-placeholder', 'p-2');\n    container.appendChild(placeholder);\n  }\n  textArea.parentNode.insertBefore(container, textArea);\n  textArea.style.display = 'none';\n  // Create the Monaco editor\n  let editor = monaco.editor.create(container, options);\n  // When the text is changed in the editor, sync it to the underlying TextArea input\n  editor.onDidChangeModelContent(() => {\n    textArea.value = editor.getValue();\n  });\n  // ref: https://github.com/vikyd/vue-monaco-singleline/blob/master/src/monaco-singleline.vue#L150\n  if ('singleLineEditor' in fieldOptions && fieldOptions.singleLineEditor) {\n    const textModel: monaco.editor.ITextModel | null = editor.getModel();\n    if (textModel !== null) {\n      // Remove multiple spaces & tabs\n      const text = textModel.getValue();\n      textModel.setValue(text.replace(/\\s\\s+/g, ' '));\n      // Handle the Find command\n      editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyF, () => {\n      });\n      // Handle typing the Enter key\n      editor.addCommand(monaco.KeyCode.Enter, () => {\n      }, '!suggestWidgetVisible');\n      // Handle typing the Tab key\n      editor.addCommand(monaco.KeyCode.Tab, () => {\n        focusNextElement();\n      });\n      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Tab, () => {\n        focusPrevElement();\n      });\n      // Handle Paste\n      editor.onDidPaste(() => {\n        // multiple rows will be merged to single row\n        let newContent = '';\n        const lineCount = textModel.getLineCount();\n        // remove all line breaks\n        for (let i = 0; i < lineCount; i += 1) {\n          newContent += textModel.getLineContent(i + 1);\n        }\n        // Remove multiple spaces & tabs\n        newContent = newContent.replace(/\\s\\s+/g, ' ');\n        textModel.setValue(newContent);\n        editor.setPosition({column: newContent.length + 1, lineNumber: 1});\n      })\n    }\n  }\n  // Get the autocompletion items\n  getCompletionItemsFromEndpoint(fieldType, codefieldOptions, endpointUrl);\n  // Custom resizer to always keep the editor full-height, without needing to scroll\n  let ignoreEvent = false;\n  const updateHeight = () => {\n    const width = editor.getLayoutInfo().width;\n    const contentHeight = Math.min(1000, editor.getContentHeight());\n    //container.style.width = `${width}px`;\n    container.style.height = `${contentHeight}px`;\n    try {\n      ignoreEvent = true;\n      editor.layout({width, height: contentHeight});\n    } finally {\n      ignoreEvent = false;\n    }\n  };\n  editor.onDidContentSizeChange(updateHeight);\n  updateHeight();\n  // Handle the placeholder\n  if (placeholderText !== '') {\n    showPlaceholder('#' + placeholderId, editor.getValue());\n    editor.onDidBlurEditorWidget(() => {\n      showPlaceholder('#' + placeholderId, editor.getValue());\n    });\n    editor.onDidFocusEditorWidget(() => {\n      hidePlaceholder('#' + placeholderId);\n    });\n  }\n\n  /**\n   * Move the focus to the next element\n   */\n  function focusNextElement() {\n    const focusable = getFocusableElements();\n    if (document.activeElement instanceof HTMLFormElement) {\n      const index = focusable.indexOf(document.activeElement);\n      if (index > -1) {\n        const nextElement = focusable[index + 1] || focusable[0];\n        nextElement.focus();\n      }\n    }\n  }\n\n  /**\n   * Move the focus to the previous element\n   */\n  function focusPrevElement() {\n    const focusable = getFocusableElements();\n    if (document.activeElement instanceof HTMLFormElement) {\n      const index = focusable.indexOf(document.activeElement);\n      if (index > -1) {\n        const prevElement = focusable[index - 1] || focusable[focusable.length];\n        prevElement.focus();\n      }\n    }\n  }\n\n  /**\n   * Get the focusable elements in the current form\n   *\n   * @returns {Array<HTMLElement>} - An array of HTMLElements that can be focusable\n   */\n  function getFocusableElements(): Array<HTMLElement> {\n    let focusable: Array<HTMLElement> = [];\n    // add all elements we want to include in our selection\n    const focusableElements = 'a:not([disabled]), button:not([disabled]), select:not([disabled]), input[type=text]:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\n    if (document.activeElement instanceof HTMLFormElement) {\n      const activeElement: HTMLFormElement = document.activeElement;\n      if (activeElement && activeElement.form) {\n        focusable = Array.prototype.filter.call(activeElement.form.querySelectorAll(focusableElements),\n          function (element) {\n            if (element instanceof HTMLElement) {\n              //check for visibility while always include the current activeElement\n              return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement\n            }\n            return false;\n          });\n      }\n    }\n\n    return focusable;\n  }\n\n  /**\n   * Show the placeholder text\n   *\n   * @param {string} selector - The selector for the placeholder element\n   * @param {string} value - The editor field's value (the text)\n   */\n  function showPlaceholder(selector: string, value: string) {\n    if (value === \"\") {\n      const elem = <HTMLElement>document.querySelector(selector);\n      if (elem !== null) {\n        elem.style.display = \"initial\";\n      }\n    }\n  }\n\n  /**\n   * Hide the placeholder text\n   *\n   * @param {string} selector - The selector for the placeholder element\n   */\n  function hidePlaceholder(selector: string) {\n    const elem = <HTMLElement>document.querySelector(selector);\n    if (elem !== null) {\n      elem.style.display = \"none\";\n    }\n  }\n}\n\nwindow.makeMonacoEditor = makeMonacoEditor;\n\nexport default makeMonacoEditor;\n\n"],"names":["getLastItem","arr","length","addCompletionItemsToMonaco","completionItems","autocompleteType","hasSubProperties","triggerCharacters","provideCompletionItems","model","position","token","result","currentItems","currentLine","getValueInRange","startLineNumber","lineNumber","startColumn","endLineNumber","endColumn","column","inTwigExpression","lastIndexOf","substring","indexOf","currentWords","replace","split","currentWord","includes","isSubProperty","charAt","parents","i","hasOwnProperty","suggestions","item","startsWith","completionItem","range","documentation","docs","value","isTrusted","supportsHtml","push","addHoverHandlerToMonaco","provideHover","getLineMaxColumn","getWordAtPosition","searchLine","thisParent","word","contents","detail","languageIcons","defaultMonacoEditorOptions","language","theme","automaticLayout","tabIndex","lineNumbers","glyphMargin","folding","lineDecorationsWidth","lineNumbersMinChars","renderLineHighlight","wordWrap","scrollBeyondLastLine","scrollbar","vertical","horizontal","alwaysConsumeMouseWheel","handleMouseWheel","fontSize","fontFamily","minimap","enabled","makeMonacoEditor","elementId","fieldType","wrapperClass","editorOptions","codefieldOptions","endpointUrl","placeholderText","textArea","document","getElementById","container","createElement","fieldOptions","JSON","parse","placeholderId","parentNode","monacoEditorOptions","options","id","classList","add","iconHtml","icon","setAttribute","Craft","t","innerHTML","appendChild","cl","classArray","trim","placeholder","insertBefore","style","display","editor","onDidChangeModelContent","getValue","singleLineEditor","textModel","getModel","text","setValue","addCommand","focusable","getFocusableElements","activeElement","HTMLFormElement","index","focus","focusNextElement","focusPrevElement","onDidPaste","newContent","lineCount","getLineCount","getLineContent","setPosition","twigfieldOptions","searchParams","URLSearchParams","set","glueChar","window","twigfieldFieldTypes","request","XMLHttpRequest","open","toString","onload","status","responseText","monacoAutocompleteItems","name","autocomplete","Object","entries","__completions","type","console","log","send","getCompletionItemsFromEndpoint","ignoreEvent","updateHeight","width","getLayoutInfo","contentHeight","Math","min","getContentHeight","height","layout","form","Array","prototype","filter","call","querySelectorAll","element","HTMLElement","offsetWidth","offsetHeight","showPlaceholder","selector","elem","querySelector","onDidContentSizeChange","onDidBlurEditorWidget","onDidFocusEditorWidget","hidePlaceholder","twigfieldBaseAssetsUrl"],"sourceRoot":""}